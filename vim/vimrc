"mclarke vimrc

" VIM PLUG BUNDLER INIT
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -flo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif

" CHECK FOR AND INSTALL PLUGINS
  autocmd VimEnter *
    \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    \|   PlugInstall --sync | q
    \| endif


" BUNDLES / PLUGINS
  call plug#begin('~/.vim/bundle')
    Plug 'scrooloose/nerdtree'
    Plug 'airblade/vim-gitgutter'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'ap/vim-buftabline'
    "Plug 'tpope/vim-fugitive'
    Plug 'leafgarland/typescript-vim'
    Plug 'pangloss/vim-javascript'
    "Plug 'neoclide/coc.nvim', {'branch': 'release'}
    "Plug 'github/copilot.vim'
  call plug#end()

" .vim DIRECTORY
  set directory=$HOME/.vim/swapfiles//
  set undodir=$HOME/.vim/undofiles//

" LEADER
  let mapleader=" "


" NERDTREE
  " OPTIONS
  " Close nerd tree on file open
      let NERDTreeQuitOnOpen = 1
  " Delete buffer if file is deleted with NERDTree
      let NERDTreeAutoDeleteBuffer = 1
  " MAPPING
      nnoremap <Leader>nf :NERDTreeToggle<Enter>
      nnoremap <silent> <Leader>nv :NERDTreeFind<Enter>


" FZF
  " MAPPING
      nnoremap <Leader>ff :FZF<Enter>
      nnoremap <Leader>fb :Buffers<Enter>
      nnoremap <Leader>fh :History<Enter>
      nnoremap <Leader>fc :Commands
      nnoremap <Leader>fm :Maps

" GITGUTTER
  " disable default keybindings
      let g:gitgutter_map_keys=0
  " MAPPING
  " wanted default mappings
      nmap ]c <Plug>(GitGutterNextHunk)
      nmap [c <Plug>(GitGutterPrevHunk)
  " git hunk preview
      nmap <Leader>gp <Plug>(GitGutterPreviewHunk)
  " git hunk stage
      nmap <Leader>gs <Plug>(GitGutterStageHunk)
  " git hunk undo
      nmap <Leader>gu <Plug>(GitGutterUndoHunk)
  " git highlight
      nmap <Plug>(GitGutterLineHightlightsToggle) :GitGutterLineHighlightsToggle<CR>
      nmap <Leader>gh <Plug>(GitGutterLineHightlightsToggle)

  " unwanted default mappings
      nmap \hu nop

" VIM FUGITIVE
  " git blame
      nmap <Leader>gb :Git blame<CR>

" MAPPING
  " unmap EX mode
     nmap Q <nop>
  " map 'kj' to esc. `^ is to keep cursor in it's position
      inoremap kj <esc>`^
  " map <Leader>s to esc and save.
      nnoremap <Leader>s :w<CR>
  " map ';lkj' to save and quit.
      inoremap <Leader>;lkj <esc>:wq<CR>
      nnoremap <Leader>;lkj :q<CR>
  " move normally between wrapped lines
      nmap j gj
      nmap k gk
  " begin / end line map
      nmap H ^
      nmap L $
  " togglepaste
      set pastetoggle=<Leader>tp
  " Switch ; and : mappin in normal mode
      " nnoremap ; :
      " nnoremap : ;

" LANGUAGE SPECIFIC
  " JS
  autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 expandtab

" Insert Debugger
  " php below
    autocmd Filetype php nnoremap <buffer> <Leader>qd oDebug_Psysh::break(get_defined_vars());<esc>
  " php above
    autocmd Filetype php nnoremap <buffer> <Leader>qD ODebug_Psysh::break(get_defined_vars());<esc>
  " javascript below
    autocmd Filetype javascript nnoremap <buffer> <Leader>qd odebugger;<esc>
  " javascript above
    autocmd Filetype javascript nnoremap <buffer> <Leader>qD Odebugger;<esc>


" BEHAVIOR
  " Controls how quickly vim write a swp file (among other things)
    set updatetime=100
  " Turn off bell
    set vb t_vb=
    set visualbell
  " Vim monitors file changes in realtime
  " autoread only reads the file when vim does an action
    set autoread
  " save undo trees in a file
    set undofile
    set undolevels=10000


" NAVIGATION
  " Quick buffer navigation
    nnoremap <Leader>l :bnext<CR>
    nnoremap <Leader>h :bprev<CR>
    nnoremap <Leader>j :e<Space>
    nnoremap <Leader>k :bd<CR>
  " keeps lines above and below when scrolling
      set scrolloff=20
  " use mouse for navigation
      set mouse=a

" DISPLAY
  " display command always
      set showcmd
  " display line char length guide
      set colorcolumn=101
      highlight ColorColumn ctermbg=darkcyan
  " display whitespace characters
"      if has("patch-7.4.710")
"        set listchars+=space:·,eol:¬,tab:>-
"      else
"        set listchars+=eol:¬,tab:>-
"      endif
"      set list
  " display status line always
      set laststatus=2
  " display line numbers
      set number
  " display cursor line
      set cursorline
  " highlight matching parentheses / brackets
      set showmatch
  " syntax highlighting
      syntax on


" FORMATTING
  " auto indent
      set autoindent
  " 2 spaces instead of tabs
      set shiftwidth=2
      set softtabstop=2
      set expandtab
  " spellchecking
      set spelllang=en-us
  " disable syntax highlighting for files > 250k
      au BufReadPost * if getfsize(bufname("%")) > 250*1024 | set syntax= ai | endif


" SEARCH
  " use case insensitive search, except when using capital letters
      set ignorecase
      set smartcase
  " search as characters are entered
      set incsearch
  " highlight matches
      set hlsearch
  " unhighlight matches on pressing enter
      nnoremap <silent> <CR> :nohls<CR><CR>

" VIM COMMANDS
  " Hitting TAB in command mode will show possible completions
    set wildmenu
    set wildchar=<TAB>
    set wildmode=list:longest,full
    set wildignore+=*.DS_STORE,*.db,node_modules/**,*.jpg,*.png,*.gif

" SOURCE LOCAL VIMRC
try
  so $HOME/dotfiles/vim/vimrc.local
catch
endtry
